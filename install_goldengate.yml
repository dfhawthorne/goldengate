---
# ----------------------------------------------------------------------------
# Install and configure Oracle GoldenGate (OGG) Microservices/Classic
# ----------------------------------------------------------------------------

- hosts:                goldengate
  tasks:

  # --------------------------------------------------------------------------
  # Set global facts for OGG installation
  # --------------------------------------------------------------------------

  - name:               "Set global facts for OGG installation"
    set_fact:
      version:          "19100201013"
      platform:         "Linux-x86-64"
      response_file:    "{{ oracle_user_home }}/oggcore_oracle_v_19_1_0.rsp"
      apply_patch_script:
                        "{{ oracle_user_home }}/apply_ogg_patch.sh"
      install_option:   "ORA19c"
      software_location:
                        "{{ oracle_base }}/product/19.1.0/ogg"
      start_manager:    false
      manager_port:     15000
      installer_dir:    "{{ oracle_user_home }}/ogg"
      configure_ogg_db: "{{ oracle_user_home }}/configure_oracle_gg.py"
      local_cdb_service_name:
                         "{{ globalDBName }}"
      local_pdb_service_name: "{{ PDBName }}.YAOCM.ID.AU"
      client_cdb_name:   "C##GGADMIN"
      client_pdb_name:   "GGATE"

  - name:                "Set extra global facts for OGG installation"
    set_fact:
      opatch_bin:        "{{ software_location }}/OPatch/opatch"

  # ----------------------------------------------------------------------------
  # Options for GOLDENGATE1
  # ----------------------------------------------------------------------------

  - name:                "Options for GOLDENGATE1"
    set_fact:
      client_type:       "CAPTURE"
      remote_cdb_service_name:
                         "GG2CDB19C.YAOCM.ID.AU"
      remote_pdb_service_name:
                         "GG2A.YAOCM.ID.AU"
      remote_host_name:  "GOLDENGATE2.YAOCM.ID.AU"
    when:                inventory_hostname == 'goldengate1.yaocm.id.au'

  # ----------------------------------------------------------------------------
  # Options for GOLDENGATE2
  # ----------------------------------------------------------------------------

  - name:                "Options for GOLDENGATE2"
    set_fact:
      client_type:       "APPLY"
      remote_cdb_service_name:
                         "GG1CDB19C.YAOCM.ID.AU"
      remote_pdb_service_name:
                         "GG1A.YAOCM.ID.AU"
      remote_host_name:  "GOLDENGATE1.YAOCM.ID.AU"
    when:                inventory_hostname == 'goldengate2.yaocm.id.au'

  # ----------------------------------------------------------------------------
  # OGG Installation Options for OGG Microservices
  # ----------------------------------------------------------------------------

  - name:                "OGG Installation Options for OGG Microservices"
    set_fact:
      patch_number:      "31908587"
      patch_archive_loc: "{{ nfs_software_dir }}/goldengate/microservices"
      sw_archive:        "{{ nfs_software_dir }}/goldengate/microservices/191004_fbo_ggs_Linux_x64_services_shiphome.zip"
      configure_ogg_mgr: "{{ oracle_user_home }}/configure_ogg_micro.sh"
      installer_bin:     "{{ installer_dir }}/fbo_ggs_Linux_x64_services_shiphome/Disk1/runInstaller"
    when:                ogg_install_option == 'microservices'

  # ----------------------------------------------------------------------------
  # OGG Installation Options for OGG Classic
  # ----------------------------------------------------------------------------

  - name:                "OGG Installation Options for OGG Classic"
    set_fact:
      patch_number:      "31908556"
      patch_archive_loc: "{{ nfs_software_dir }}/goldengate/classic"
      sw_archive:        "{{ nfs_software_dir }}/goldengate/classic/191004_fbo_ggs_Linux_x64_shiphome.zip"
      configure_ogg_mgr: "{{ oracle_user_home }}/configure_ogg_classic.sh"
      installer_bin:     "{{ installer_dir }}/fbo_ggs_Linux_x64_shiphome/Disk1/runInstaller"
    when:                ogg_install_option == 'classic'

  # --------------------------------------------------------------------------
  # Load passwords from passwords/oracle.yml which has the following
  # variables:
  # * pw_all
  # * pw_sys
  # * pw_system
  # * pw_pdbadmin
  #
  # >>>>>> This file is deliberately NOT included in the GIT repository <<<<<<
  # --------------------------------------------------------------------------

  - name:               "Load passwords"
    include_vars:
      file:             "../orchestration/passwords/oracle.yml"
    no_log:             true

  - name:               "Create directory for OGG Installer"
    file:
      name:             "{{ installer_dir }}"
      group:            "{{ install_group }}"
      owner:            oracle
      state:            directory
      mode:             0775
    become:             yes
    become_user:        oracle

  # ------------------- Use Oracle GoldenGate Installer

  - name:               "Unzip Oracle GoldenGate Installer"
    unarchive:
      creates:          "{{ installer_bin }}"
      dest:             "{{ installer_dir }}"
      group:            "{{ install_group }}"
      owner:            oracle
      remote_src:       yes
      src:              "{{ sw_archive }}"
    become:             yes
    become_user:        oracle
 
  - name:               "Generate Response File and scripts"
    template:
      src:              "{{ item.dest | basename  }}.j2"
      dest:             "{{ item.dest }}"
      mode:             "{{ item.mode }}"
    become:             yes
    become_user:        oracle
    with_items:
      - { dest: "{{ response_file }}", mode: "0600" }
      - { dest: "{{ apply_patch_script }}", mode: "0700" }
  
  - name:               "Perform a Silent Installation"
    command:
      argv:
        -               "{{ installer_bin }}"
        -               "-silent"
        -               "-waitForCompletion"
        -               "-responseFile"
        -               "{{ response_file }}"
      creates:          "{{ software_location }}"
    register:           ogg_install
    changed_when: >
      ("Successfully Setup Software." in ogg_install.stdout)
    become:             yes
    become_user:        oracle

  - name:               "Display output from silent installation"
    debug:
      var:              ogg_install.stdout_lines
    when:               ogg_install.stdout_lines is defined

  - name:               "Run orainstRoot.sh after Oracle GG Software Installation"
    command:
      argv:
      -                 "{{ inventory_location }}/orainstRoot.sh"
    register:           orainstRoot
    when:
    -                   ogg_install.stdout is defined
    -                   ogg_install.stdout is search('/orainstRoot.sh')
    become:             yes
    become_user:        root

  - name:               "Output from orainstRoot.sh script"
    debug:
      var:              orainstRoot.stdout_lines
    when:               orainstRoot.stdout_lines is defined

  # ------------------- Configure firewall for OGG

  - name:               "Allow OGG to pass through firewall"
    firewalld:
      permanent:        yes
      port:             "{{ item }}"
      state:            enabled
      zone:             public
    with_items:
      -                 "{{ manager_port }}/tcp"
      -                 "{{ manager_port }}/udp"
    become:             yes
    become_user:        root
    notify:             "Reload FireWall Rules"

  # ------------------- Apply OGG patches

  - name:               "Verify existence of OPatch utility"
    stat:
      path:             "{{ opatch_bin }}"
    register:           opatch_stat

  - name:               "Apply patch if it has not been applied"
    block:

    - name:             "Get current patches"
      command:
        argv:
          -             "{{ opatch_bin }}"
          -             "lsinventory"
      become:           yes
      become_user:      oracle
      changed_when:     false
      register:         patch_inventory

    - name:             "Patch needs to be applied"
      block:
      
      - name:           "Create Extraction Directory"
        file:
          path:         "{{ software_location }}/patches/P{{ patch_number }}"
          group:        "{{ install_group }}"
          owner:        oracle
          state:        directory
          mode:         '775'

      - name:           "Unzip Oracle Patch"
        unarchive:
          creates:      "{{ software_location }}/patches/P{{ patch_number }}/{{ patch_number }}"
          dest:         "{{ software_location }}/patches/P{{ patch_number }}"
          group:        "{{ install_group }}"
          owner:        oracle
          remote_src:   yes
          src:          "{{ patch_archive_loc }}/p{{ patch_number }}_{{ version }}_{{ platform }}.zip"

      - name:           "Apply patch"
        command:
          argv:
            -           "{{ apply_patch_script }}"
            -           "{{ patch_number }}"
        register:       apply_patch
        changed_when: >
          (apply_patch.stdout is search("Patch \d+ successfully applied"))

      - name:           "Display output from apply of patch"
        debug:
          var:          apply_patch.stdout_lines
        when:           apply_patch.stdout_lines is defined

      become:           yes
      become_user:      oracle
      when:
        -               patch_inventory.stdout is defined
        -               patch_inventory.stdout is not search(patch_number)

    when:
      -                 opatch_stat.stat is defined
      -                 opatch_stat.stat.exists

  # ------------------- Set TNSNAMES Aliases

  - name:               "Set path of TNSNAMES file"
    set_fact:
      tnsnames:         "{{ oracle_db_home }}/network/admin/tnsnames.ora"

  - name:               "Add alias to TNSNAMES file"
    lineinfile:
      create:           "yes"
      group:            "{{ install_group }}"
      mode:             0644
      owner:            "oracle"
      path:             "{{ tnsnames }}"
      regexp:           '^{{ item.alias }}\s*=\s*'
      line:             >
        {{ item.alias }} = (DESCRIPTION=
        (ADDRESS=(PROTOCOL=TCP)(HOST={{ item.host }})
        (PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)
        (SERVICE_NAME={{ item.service }})))
      insertbefore:     EOF
    with_items:
      - { alias: "remote_cdb_ogg", host: "{{ remote_host_name }}", service: "{{ remote_cdb_service_name }}" }
      - { alias: "remote_pdb_ogg", host: "{{ remote_host_name }}", service: "{{ remote_pdb_service_name }}" }
      - { alias: "local_cdb_ogg",  host: "localhost",  service: "{{ local_cdb_service_name }}"  }
      - { alias: "local_pdb_ogg",  host: "localhost",  service: "{{ local_pdb_service_name }}"  }
    become:             yes
    become_user:        oracle

  # ------------------- Configure Oracle DB for OGG

  - name:               "Install PIP"
    yum:
      name:             python3-pip
      state:            present
    become:             yes
    become_user:        root 

  - name:               "Install required Python packages"
    pip:
      name:
        -               "cx_Oracle"
      state:            present
    become:             yes
    become_user:        root 

  - name:               "Create configuration script"
    template:
      dest:             "{{ item }}"
      src:              "{{ item | basename }}.j2"
      mode:             "u+rwx"
    with_items:
      -                 "{{ configure_ogg_db }}"
      -                 "{{ configure_ogg_mgr }}"
    become:             yes
    become_user:        oracle

  - name:               "Configure DB for OGG"
    command:
      argv:
        -               "{{ configure_ogg_db }}"
        -               "{{ client_type }}"
        -               "{{ client_cdb_name }}"
        -               "{{ client_pdb_name }}"
    become:             yes
    become_user:        oracle
    register:           configure_ogg_db
    changed_when: >
      (configure_ogg_db.stdout is search('Common user, "[^"]+", created')) or
      ('Privileges granted to common user,' in configure_ogg_db.stdout) or
      ('Database changed to ARCHIVELOG mode' in configure_ogg_db.stdout) or
      ('Logins have been enabled in CDB' in configure_ogg_db.stdout) or
      (configure_ogg_db.stdout is search('PDB ([^)]+) opened')) or
      (configure_ogg_db.stdout is search('User, "[^"]+", created in GG1A')) or
      (configure_ogg_db.stdout is search('Privileges granted to user, "[^"]+", in ')) or
      ('Supplement log data is now being recorded' in configure_ogg_db.stdout) or
      ('All changes are now being logged' in configure_ogg_db.stdout) or
      ('ENABLE_GOLDENGATE_REPLICATION set to true' in configure_ogg_db.stdout) or
      (configure_ogg_db.stdout is search('UNDO_RETENTION set to \d+')) or
      (configure_ogg_db.stdout is search("LOCAL_LISTENER set to '\(.*\)\)\)'"))


  - name:               "Display output from Configure DB for OGG"
    debug:
      var:              configure_ogg_db.stdout_lines
    when:               configure_ogg_db.stdout_lines is defined

  - name:               "Configure Manager for OGG"
    command:
      argv:
        -               "{{ configure_ogg_mgr }}"
    become:             yes
    become_user:        oracle
    register:           configure_ogg_mgr

  - name:               "Display output from Configure Manager for OGG"
    debug:
      var:              configure_ogg_mgr.stdout_lines
    when:               configure_ogg_mgr.stdout_lines is defined

  # -----------------------------------------------------------------------------
  # Update .bash_profile for Oracle GoldenGate installation
  # -----------------------------------------------------------------------------

  - name:                 "Update .bash_profile for Oracle GoldenGate installation"
    ansible.builtin.blockinfile:
      create:             yes
      owner:              oracle
      group:              "{{ install_group }}"
      mode:               "0700"
      state:              present
      path:               "{{ oracle_user_home }}/.bash_profile"
      marker:             "# {mark} ANSIBLE MANAGED BLOCK FOR OGG INSTALLATION"
      block: |
        export OGG_HOME="{{ software_location }}"
        case ":${PATH}:" in
            *":${OGG_HOME}:"*) ;;
            *) export PATH="${OGG_HOME}:${PATH}" ;;
        esac
    become:             yes
    become_user:        oracle
     
  # ----------------------------------------------------------------------------
  # Handlers
  # ----------------------------------------------------------------------------

  handlers:

  - name:               "Reload FireWall Rules"
    command:
      argv:
        -               firewall-cmd
        -               "--reload"
    become:             yes
    become_user:        root
...
